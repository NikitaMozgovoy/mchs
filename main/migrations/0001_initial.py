# Generated by Django 3.1.7 on 2021-12-13 12:32

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.TextField(blank=True, null=True)),
                ('tables', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'access',
            },
        ),
        migrations.CreateModel(
            name='Apparat',
            fields=[
                ('id', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('aname', models.TextField()),
                ('createdate', models.TextField()),
                ('worklife', models.TextField(blank=True, null=True)),
                ('exportdate', models.TextField()),
                ('section', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'apparat',
            },
        ),
        migrations.CreateModel(
            name='Appname',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'appname',
            },
        ),
        migrations.CreateModel(
            name='Approvals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'approvals',
            },
        ),
        migrations.CreateModel(
            name='Assoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'assoc',
            },
        ),
        migrations.CreateModel(
            name='Attvalid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Attvalid',
            },
        ),
        migrations.CreateModel(
            name='Ballname',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ballname',
            },
        ),
        migrations.CreateModel(
            name='Balloon',
            fields=[
                ('id', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('bname', models.TextField(blank=True, null=True)),
                ('createdate', models.TextField()),
                ('worklife', models.TextField()),
                ('checkdate', models.TextField()),
                ('valveno', models.TextField(blank=True, null=True)),
                ('valvedate', models.TextField(blank=True, null=True)),
                ('section', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'balloon',
            },
        ),
        migrations.CreateModel(
            name='Datas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rowname', models.TextField(blank=True, null=True)),
                ('tablename', models.TextField(blank=True, null=True)),
                ('tablerowname', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'datas',
            },
        ),
        migrations.CreateModel(
            name='Passedapprovals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peopleid', models.IntegerField(blank=True, null=True)),
                ('result', models.IntegerField(blank=True, null=True)),
                ('why', models.TextField(blank=True, null=True)),
                ('attdate', models.TextField(blank=True, null=True)),
                ('profdate', models.TextField(blank=True, null=True)),
                ('approvalsname', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'passedapprovals',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rank',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Result',
            },
        ),
        migrations.CreateModel(
            name='Rtp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rtp',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sectionname', models.TextField(blank=True, null=True)),
                ('squadname', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'section',
            },
        ),
        migrations.CreateModel(
            name='Tables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'tables',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peopleid', models.IntegerField(blank=True, null=True)),
                ('username', models.TextField(blank=True, null=True)),
                ('password', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Worklife',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'worklife',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=64, unique=True, verbose_name='E-mail')),
                ('password', models.CharField(max_length=30, verbose_name='Пароль')),
                ('fullname', models.CharField(blank=True, max_length=50, null=True)),
                ('post', models.CharField(blank=True, max_length=20, null=True)),
                ('rank', models.CharField(blank=True, max_length=20, null=True)),
                ('bdate', models.TextField(blank=True, null=True)),
                ('rtp', models.IntegerField(blank=True, db_column='RTP', null=True)),
                ('passdate', models.TextField(blank=True, null=True)),
                ('attvalid', models.IntegerField(blank=True, null=True)),
                ('why', models.TextField(blank=True, null=True)),
                ('document', models.TextField(blank=True, null=True)),
                ('getdate', models.TextField(blank=True, null=True)),
                ('findate', models.TextField(blank=True, null=True)),
                ('gdzs', models.TextField(blank=True, db_column='GDZS', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['fullname'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
